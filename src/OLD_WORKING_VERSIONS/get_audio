#! /usr/bin/env python3
import sys
sys.path.append("/opt/homebrew/bin/")
import yt_dlp 
import subprocess
import argparse
import os



#################################################################
# Constants for script.
#################################################################
OUTTMPL_STR = "%(title)s.%(ext)s" # format string for audio name. Used for setting and resetting.
# options for youtube downloader to convert
ydl_opts = {
    'format': 'bestaudio/best',
    'outtmpl': OUTTMPL_STR,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'flac',
       # 'preferredquality': '192', # Don't think this is needed.
    }],
}



# uses argparser to get arguments
def get_arguments():
    parser = argparse.ArgumentParser()

    parser.add_argument("-u", "--url", help="Specify the URL of a video or playlist.", action="store", dest="URL")
    parser.add_argument("-l", "--location", help="Specify a location for the files to download to.", action="store", dest="LOCATION")
    parser.add_argument("--make-directory", help="If location is specified, make the directory with the specified path.", action="store_true", dest="MAKE_DIRECTORY")
    parser.add_argument("-f", "--file", help="Specify a file name/path of a textfile with a single URL on each line.", action="store", dest="FILE")
    parser.add_argument("-c", "--clear", help="Clear youtube-dl's cache", action="store_true")
    parser.add_argument("--location-file", help="Give a .csv file with <URL,location,make-directory> where make-directory is <True|False>. If not specified, defaults to False.", action="store", dest="LOCATION_FILE")
    parser.add_argument("-a", "--audio-format", help="Audio format to write to. Defaults to 'flac' which is .opus on most systems. Other options are: aac, alac, flac, m4a, mp3, opus, vorbis, wav", action="store", dest="AUDIO_FORMAT")
    parser.add_argument("--name-file", help="Give a .csv file with <URL,location,file-name,make-directory> where file-name is the name the file will be renamed to from the youtube title (no extension, it will be added automatically), and make-directory is <True|False>. If not specified, defaults to False.", action="store", dest="NAME_FILE")

    return parser.parse_args()

#################################################################
# Use the ydl_opts to download a audio file.
#################################################################
def download(URL):
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        try:
            ydl.download([URL])
        except yt_dlp.utils.ExtractorError as extract_error:
            if "Video unavailable" in str(extract_error):
                print("\nIt appears the video is deemed 'unavailable' by youtube...\ncontinuing...\n")
            else:
                print(extract_error)


#################################################################
# Clears the cache. Occasionally, the cache can cause issues
# and running this command allows for a fresh download attempt
# to run successfully.
#################################################################
def _clear_cache():
    subprocess.run(["yt-dlp", "--rm-cache-dir"])

#################################################################
# User has the option to provide a flag to create a new directory
# for the output to be stored in.
#################################################################
def _make_new_directory(location):
    try:
        print("Making directory:", location)
        os.mkdir(location)
    except OSError as error:
        print("[ERROR] OSError occurred while trying to make new directory. Exiting...")
        print(error) 
        sys.exit(-1)


#################################################################
# Provide user with the option to change the format the audio is
# downloaded in. Prints options and exits if format isn't 
# supported. Default is 'best'.
#################################################################
def _change_audio_format(new_format):
    # current supported options check. This should be in a config somewhere... if I wanted to.
    supported = ["best", "aac", "alac", "flac", "m4a", "mp3", "opus", "vorbis", "wav"]
    if new_format in supported:
        ydl_opts["postprocessors"][0]["preferredcodec"] = new_format
    else:
        print("[ERROR] The format provided: " + new_format + "\nis not supported. Supported formats are:")
        for s_format in supported:
            print("\t" + s_format)
        print("\nExiting...")
        sys.exit(-1)


#################################################################
# EOL seperated URLs in file
#################################################################
def _download_from_file(filename):
    print("Using URL values from the file:", filename)
    with open(filename, "r") as f:
        line = f.readline()
        while line:
            download(line)
            line = f.readline()

#################################################################
# Location file - Using a simple CSV file, download multiple
# different audio files and write to different locations.
#   line format: < URL, location, (Optional) True|False >
#   Default for optional 3rd boolean is false.
#################################################################
def _download_from_location_file(filename):
    with open(filename, "r") as f:
        line = f.readline()
        while line:
            items = line.split(",")
            if len(items) == 3:
                if items[2].strip().lower() in ["True", "T"]:
                    # Try to make this directories location
                    try:
                        print("Making directory:", items[1].strip())
                        os.mkdir(items[1].strip())
                    except OSError as error:
                        print("[ERROR] OSError occurred while trying to make new directory.\n\tSkipping line in file:", line)
                        print(error) 
                        line = f.readline()
                        continue

            # sanatize the filepath if path seperator not provided.
            # This adds the directory path with the system file seperator.
            ydl_opts["outtmpl"] = os.path.join(items[1].strip(), OUTTMPL_STR)
            download(items[0].strip())
            ydl_opts["outtmpl"] = OUTTMPL_STR # reset the location option
            line = f.readline()

#################################################################
# Name file - Using a simple CSV file, download multiple
# different audio files and write to different locations WHILE
# changing the name of downloaded file.
#   line format: < URL, location, new_name, (Optional) True|False >
#   Default for optional 3rd boolean is false.
#################################################################
def _download_from_name_file(filename):
    with open(filename, "r") as f:
        line = f.readline()
        while line:
            items = line.split(",")
            if len(items) == 4:
                if items[3].strip().lower() in ["True", "T"]:
                    # Try to make this directories location
                    try:
                        print("Making directory:", items[1].strip())
                        os.mkdir(items[1].strip())
                    except OSError as error:
                        print("[ERROR] OSError occurred while trying to make new directory.\n\tSkipping line in file:", line)
                        print(error) 
                        line = f.readline()
                        continue


            # sanatize the filepath if path seperator not provided.
            # This adds the directory path with the system file seperator.
            ydl_opts["outtmpl"] = os.path.join(items[1].strip(), items[2].strip() + ".%(ext)s")
            download(items[0].strip())
            #_audio_format = 
            ydl_opts["outtmpl"] = OUTTMPL_STR # reset the location option
            line = f.readline()
    
def main():
    args = get_arguments()

    #--------------------------------------------------------#
    # PRE PROCESSING OPTIONS / DISQUALIFICATIONS
    #--------------------------------------------------------#
    if args.clear:
        _clear_cache()
    if args.LOCATION:
        if not args.FILE and not args.URL:
            print("[ERROR] Must specify a url or a file containing URLS. \n\tRun with \'-h\' option for help.")
            sys.exit(-1)
        if args.MAKE_DIRECTORY:
            _make_new_directory(args.LOCATION)

        # sanatize the filepath if path seperator not provided.
        ydl_opts["outtmpl"] = os.path.join(args.LOCATION, OUTTMPL_STR)

    # Check if new format was provided. 
    if args.AUDIO_FORMAT:
        _change_audio_format(args.AUDIO_FORMAT)

    # Disqualifiers #
    if args.FILE and args.LOCATION_FILE:
        print("[ERROR]  Both a file and a location file provided. Please choose one or the other.\nexiting...\n"); sys.exit(-1)

    #--------------------------------------------------------#
    # DOWNLOAD SECTION
    #--------------------------------------------------------#
    if args.URL:
        print("Using a URL from the command line.")
        download(args.URL)

    elif args.FILE:
        _download_from_file(args.FILE)
    elif args.LOCATION_FILE:
        _download_from_location_file(args.LOCATION_FILE)
    elif args.NAME_FILE:
        _download_from_name_file(args.NAME_FILE)


if __name__ == "__main__":
    main()



# TODO
"""
Playlist options
New file format with rename
see if preffered quality is needed/used
    If can set to highest, set aas default
    give option to reduce
examples directory
"""
