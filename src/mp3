#! /usr/bin/env python3

from __future__ import unicode_literals
import yt_dlp 
import sys
import subprocess
import argparse
import os


OUTTMPL_STR = "%(title)s.%(ext)s" # format string for mp3 name. Used for setting and resetting.
# options for youtube downloader to convert
ydl_opts = {
    'format': 'bestaudio/best',
    'outtmpl': OUTTMPL_STR,
    'postprocessors': [{
        'key': 'FFmpegExtractAudio',
        'preferredcodec': 'best',
       # 'preferredquality': '192', # Don't think this is needed.
    }],
}



def download(URL):
    with yt_dlp.YoutubeDL(ydl_opts) as ydl:
        ydl.download([URL])


# uses argparser to get arguments
def get_arguments():
    #parser = argparse.ArgumentParser(description="Downlad MP3's from YouTube videos.")
    parser = argparse.ArgumentParser()

    parser.add_argument("-u", "--url", help="Specify the URL of a video or playlist.", action="store", dest="URL")
    parser.add_argument("-l", "--location", help="Specify a location for the files to download to.", action="store", dest="LOCATION")
    parser.add_argument("--make-directory", help="If location is specified, make the directory with the specified path.", action="store_true", dest="MAKE_DIRECTORY")
    parser.add_argument("-f", "--file", help="Specify a file name/path of a textfile with a single URL on each line.", action="store", dest="FILE")
    parser.add_argument("-c", "--clear", help="Clear youtube-dl's cache", action="store_true")
    parser.add_argument("--location-file", help="Give a .csv file with <URL,location,make-directory> where make-directory is <True|False>. If not specified, defaults to False.", dest="LOCATION_FILE")
    parser.add_argument("-a", "--audio-format", help="Audio format to write to. Defaults to 'best' which is .opus on most systems. Other options are: aac, alac, flac, m4a, mp3, opus, vorbis, wav", action="store", dest="AUDIO_FORMAT")

    return parser.parse_args()

#################################################################
# Clears the cache. Occasionally, the cache can cause issues
# and running this command allows for a fresh download attempt
# to run successfully.
#################################################################
def _clear_cache():
    subprocess.run(["yt-dlp", "--rm-cache-dir"])

#################################################################
# User has the option to provide a flag to create a new directory
# for the output to be stored in.
#################################################################
def _make_new_directory(location):
    try:
        print("Making directory:", location)
        os.mkdir(location)
    except OSError as error:
        print("[ERROR] OSError occurred while trying to make new directory. Exiting...")
        print(error) 
        sys.exit(-1)


def _change_audio_format(new_format):
    # current supported options check. This should be in a config somewhere... if I wanted to.
    supported = ["best", "aac", "alac", "flac", "m4a", "mp3", "opus", "vorbis", "wav"]
    if new_format in supported:
        ydl_opts["postprocessors"][0]["preferredcodec"] = new_format
    else:
        print("[ERROR] The format provided: " + new_format + "\nis not supported. Supported formats are:")
        for s_format in supported:
            print("\t" + s_format)
        print("\nExiting...")
        sys.exit(-1)

    
def main():
    args = get_arguments()

    if args.clear:
        _clear_cache()
    if args.LOCATION:
        if not args.FILE and not args.URL:
            print("[ERROR] Must specify a url or a file containing URLS. \n\tRun with \'-h\' option for help.")
            sys.exit(-1)
        if args.MAKE_DIRECTORY:
            _make_new_directory(args.LOCATION)

        # sanatize the filepath if path seperator not provided.
        ydl_opts["outtmpl"] = os.path.join(args.LOCATION, OUTTMPL_STR)

    # Check if new format was provided. 
    if args.AUDIO_FORMAT:
        _change_audio_format(args.AUDIO_FORMAT)

    # main decision section
    if args.URL:
        print("Using a URL from the command line.")
        download(args.URL)
    elif args.FILE:
        print("Using URL values from the file:", args.FILE)
        with open(args.FILE, "r") as f:
            line = f.readline()
            while True:
                if not line:
                    break
                download(line)
                line = f.readline()
    elif args.LOCATION_FILE:
        # line format: < URL, location, (Optional) True|False >
        print("Using URL values from the file:", args.LOCATION_FILE)
        with open(args.LOCATION_FILE, "r") as f:
            try:
                while True:
                    line = f.readline()
                    if not line:
                        break
                    items = line.split(",")
                    if len(items) == 3:
                        if items[2] == "True":
                            # Try to make this directories location
                            try:
                                print("Making directory:", items[1].strip())
                                os.mkdir(items[1].strip())
                            except OSError as error:
                                print("[ERROR] OSError occurred while trying to make new directory.\n\tSkipping line in file:", line)
                                print(error) 
                                continue

                    # sanatize the filepath if path seperator not provided.
                    ydl_opts["outtmpl"] = os.path.join(items[1].strip(), OUTTMPL_STR)
                    print("+++++ [URL] " + items[0].strip())
                    download(items[0].strip())
                    # reset the location option
                    ydl_opts["outtmpl"] = OUTTMPL_STR
            except Exception as ec:
                print("!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!")
                print(ec)

    # done!
    sys.exit(0)


if __name__ == "__main__":
    main()
